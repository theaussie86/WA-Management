name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  # Job 1: Quick Checks
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Type Check
        run: npm run type-check

      - name: ESLint Check
        run: npm run lint

  # Job 2: Critical Tests (Lib + Hooks) - HOCHSTE PRIORITÃ„T
  critical-tests:
    name: ðŸ”´ Critical Tests (Lib & Hooks)
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Critical Tests
        run: npm run test:critical --maxWorkers=2

      - name: Display Critical Tests Summary
        run: |
          echo "## ðŸ”´ Critical Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "Critical tests (Lib + Hooks) completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Coverage requirements met for critical code areas." >> $GITHUB_STEP_SUMMARY

  # Job 3: Component Tests - MITTLERE PRIORITÃ„T
  component-tests:
    name: ðŸŸ¡ Component Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Component Tests
        run: npm run test:components --maxWorkers=2

  # Job 4: Build Check
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [critical-tests, component-tests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

  # Job 5: Security Check
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

  # Job 6: PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [critical-tests, component-tests, build-check, security-check]
    if: always()
    steps:
      - name: Generate PR Summary
        run: |
          echo "## ðŸ§ª PR Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Kategorie | Status | PrioritÃ¤t |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical (Lib + Hooks) | ${{ needs.critical-tests.result }} | ðŸ”´ Hoch |" >> $GITHUB_STEP_SUMMARY
          echo "| Components | ${{ needs.component-tests.result }} | ðŸŸ¡ Mittel |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-check.result }} | ðŸ”´ Hoch |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-check.result }} | ðŸ”´ Hoch |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸŽ¯ Differenzierte Teststrategie" >> $GITHUB_STEP_SUMMARY
          echo "- **Kritische Bereiche** (lib, hooks): Hohe Coverage-Anforderungen" >> $GITHUB_STEP_SUMMARY
          echo "- **Komponenten**: Mittlere Coverage-Anforderungen" >> $GITHUB_STEP_SUMMARY
          echo "- **Shadcn UI**: Niedrige Coverage-Anforderungen" >> $GITHUB_STEP_SUMMARY
