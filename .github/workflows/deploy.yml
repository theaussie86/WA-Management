name: Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20"

jobs:
  # Job 1: Pre-deployment Tests
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Full Test Suite
        run: npm run test:ci -- --testPathPatterns="__tests__/(components|hooks|lib|utils)" --coverage --maxWorkers=2
        env:
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Check Test Coverage
        run: |
          COVERAGE_THRESHOLD=20
          COVERAGE=$(npm run test:ci -- --testPathPatterns="__tests__/(components|hooks|lib|utils)" --coverage --coverageReporters=text-summary | grep -o 'All files[^0-9]*[0-9]*\.[0-9]*' | grep -o '[0-9]*\.[0-9]*$')
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold $COVERAGE_THRESHOLD%"
          fi

  # Job 2: Build for Production
  build-production:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            .next/
            public/
            package.json
            package-lock.json

  # Job 3: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./

      - name: Run Post-deployment Health Check
        run: |
          # Wait for deployment to be ready
          sleep 120

          # Health check
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: "#deployments"
          text: "🚀 Production deployment successful!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 4: Rollback (if needed)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Rollback to Previous Version
        run: |
          echo "🔄 Rolling back to previous version..."
          # Add rollback logic here
          # This would typically involve reverting to the previous deployment

      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "🔄 Rollback initiated due to deployment failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 5: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "🧹 Cleaning up build artifacts..."
          # Cleanup logic here

      - name: Update Deployment Status
        run: |
          echo "📊 Deployment pipeline completed"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Status: ${{ job.status }}"
